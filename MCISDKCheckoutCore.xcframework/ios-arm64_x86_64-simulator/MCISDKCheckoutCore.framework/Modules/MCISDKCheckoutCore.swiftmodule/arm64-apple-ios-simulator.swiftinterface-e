// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MCISDKCheckoutCore
@_exported import MCISDKCheckoutCore
import MCISDKFoundation
import MCISDKKit
import MCISDKLogger
import Swift
import UIKit
import _Concurrency
public typealias CheckoutableVC = UIKit.UIViewController & Checkoutable
public protocol Checkoutable : AnyObject {
  var strategy: CheckoutStrategy { get set }
  var accounts: [MCISDKAccount] { get set }
  var delegate: CheckoutDelegate? { get set }
  var isOffline: Swift.Bool { get set }
  var shouldDisplayViewMessage: Swift.Bool { get set }
  var usePLAvailableLimit: Swift.Bool { get set }
  var moduleCheckout: ModuleCheckout { get set }
  func checkout(strategy: CheckoutStrategy, accounts: [MCISDKAccount]?, delegate: CheckoutDelegate?) -> CheckoutableVC
  func prepopulate(activeAccounts: [MCISDKAccount]?)
}
public protocol CheckoutDelegate : AnyObject {
  func didComplete(with object: Any?)
  func didFail(with error: Foundation.NSError)
  func shouldHandleError() -> Swift.Bool
}
extension CheckoutDelegate {
  public func didFail(with error: Foundation.NSError)
  public func shouldHandleError() -> Swift.Bool
}
public struct UnknownCheckoutStrategy : CheckoutStrategy {
  public init()
  public var amount: Swift.String {
    get
  }
  public var needValidateAmount: Swift.Bool {
    get
  }
  public var serviceTitle: Swift.String? {
    get
  }
  public var buttonTitle: Swift.String? {
    get
  }
  public var merchant: MCISDKMerchant? {
    get
  }
  public var isPaymentProcessable: Swift.Bool {
    get
  }
  public func processPayment(account: MCISDKAccount, completion: @escaping (Swift.Result<Any?, Foundation.NSError>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class CheckoutConfig {
  public static let shared: CheckoutConfig
  final public var imageSuccess: UIKit.UIImage?
  final public var imageReceipt: UIKit.UIImage?
  @objc deinit
}
public protocol CheckoutStrategy {
  var amount: Swift.String { get }
  var needValidateAmount: Swift.Bool { get }
  var serviceTitle: Swift.String? { get }
  var serviceDescription: Swift.String? { get }
  var buttonTitle: Swift.String? { get }
  var automaticSelect: MCISDKAccount? { get }
  var shouldShowSuccess: Swift.Bool { get }
  var accountsInterceptor: (MCISDKAccount) -> Swift.Bool { get }
  var merchant: MCISDKMerchant? { get }
  var isPaymentProcessable: Swift.Bool { get }
  func processPayment(account: MCISDKAccount, completion: @escaping (Swift.Result<Any?, Foundation.NSError>) -> Swift.Void)
}
extension CheckoutStrategy {
  public var automaticSelect: MCISDKAccount? {
    get
  }
  public var serviceDescription: Swift.String? {
    get
  }
  public var shouldShowSuccess: Swift.Bool {
    get
  }
  public var accountsInterceptor: (MCISDKAccount) -> Swift.Bool {
    get
  }
  public func notifyTransctionState(to state: Swift.String)
}
