// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MCISDKDigitalCheckout
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Kingfisher
import MCISDKAuth
import MCISDKCheckoutCore
@_exported import MCISDKDigitalCheckout
import MCISDKFoundation
import MCISDKKit
import MCISDKLogger
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class CheckoutVC : MCISDKKit.MCIViewController, Checkoutable, MCISDKKit.Identifiable, MCISDKKit.Dismissable {
  @_Concurrency.MainActor(unsafe) final public var strategy: CheckoutStrategy {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var accounts: [MCIAccount] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var delegate: CheckoutDelegate?
  @_Concurrency.MainActor(unsafe) final public var isOffline: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var shouldDisplayViewMessage: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var usePLAvailableLimit: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var moduleCheckout: ModuleCheckout
  @_Concurrency.MainActor(unsafe) final public class func allocate() -> CheckoutVC
  @_Concurrency.MainActor(unsafe) final public func checkout(strategy: CheckoutStrategy, accounts: [MCIAccount]?, delegate: CheckoutDelegate?) -> CheckoutableVC
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func prepopulate(activeAccounts: [MCIAccount]?)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CheckoutVC : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
}
extension CheckoutVC : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension CheckoutVC : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc final public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension UIKit.UIStoryboard {
  @_Concurrency.MainActor(unsafe) public class var checkout: UIKit.UIStoryboard {
    get
  }
}
public protocol DigitalOperationFlowDelegate : AnyObject {
  func digitalOperation(_ digitalOperation: DigitalOperationFlowVC, didCompleteWith object: Any?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DigitalOperationFlowVC : MCISDKKit.MCIFlowViewController, MCISDKKit.Identifiable {
  @_Concurrency.MainActor(unsafe) public var strategy: AutoCheckoutStrategy!
  @_Concurrency.MainActor(unsafe) public var dismissToWallet: Swift.Bool?
  @_Concurrency.MainActor(unsafe) weak public var delegate: AutoCheckoutDelegate?
  @_Concurrency.MainActor(unsafe) public class func allocate() -> DigitalOperationFlowVC
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension DigitalOperationFlowVC : AutoCheckoutable {
  @_Concurrency.MainActor(unsafe) public func checkout(strategy: AutoCheckoutStrategy, delegate: AutoCheckoutDelegate?, dismissToWallet: Swift.Bool?) -> AutoCheckoutVC
}
extension DigitalOperationFlowVC : PasswordFlowDelegate {
  @_Concurrency.MainActor(unsafe) public func passwordFlowDidAuthenticate(_ passwordFlowVC: PasswordFlowVC)
  @_Concurrency.MainActor(unsafe) public func dismissView(_ passwordFlowVC: PasswordFlowVC)
}
extension CheckoutVC : UIKit.UICollectionViewDelegateFlowLayout {}
