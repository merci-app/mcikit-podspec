// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MCISDKAuth
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
@_exported import MCISDKAuth
import MCISDKFoundation
import MCISDKKit
import MCISDKLogger
import Swift
import UIKit
import _Concurrency
import _StringProcessing
extension MCISDKFoundation {
  final public func requestCustomerAuthenticationCode(phoneNumber: Swift.String, vatNumber: Swift.String, completion: @escaping MCIResult<MCISDKAuthenticationState>)
  final public func requestCustomerAuthenticationCodeValidation(authId: Swift.String, sms: Swift.String, completion: @escaping MCIResult<MCISDKAuthenticationState>)
  final public func requestCustomerAuthenticationCodeResend(authId: Swift.String, completion: @escaping MCIResult<Swift.Void>)
  final public func requestCustomerAuthenticationProfile(authId: Swift.String, cpf: Swift.String, name: Swift.String? = nil, email: Swift.String? = nil, password: Swift.String, completion: @escaping MCIResult<Swift.Void>)
  final public func revokeCustomerAuthentication(completion: @escaping ((Swift.Result<Swift.Void, Foundation.NSError>) -> Swift.Void))
}
public protocol PasswordFlowDelegate : AnyObject {
  func passwordFlowDidAuthenticate(_ passwordFlowVC: PasswordFlowVC)
  func dismissView(_ passwordFlowVC: PasswordFlowVC)
}
extension PasswordFlowDelegate {
  public func dismissView(_ passwordFlowVC: PasswordFlowVC)
}
extension PasswordFlowDelegate where Self : UIKit.UIViewController, Self : MCISDKKit.MCINavigationStylable, Self : MCISDKKit.MCIViewControllerProtocol {
  public func performUnwindToSplashVC()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PasswordFlowVC : MCISDKKit.MCIFlowViewController, MCISDKKit.Identifiable {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: PasswordFlowDelegate?
  @_Concurrency.MainActor(unsafe) final public var dismissToWallet: Swift.Bool?
  @_Concurrency.MainActor(unsafe) final public class func allocate() -> PasswordFlowVC
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
